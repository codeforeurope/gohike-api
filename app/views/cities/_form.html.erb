<%= simple_form_for(@city) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs clearfix">
      <div class="span5">
        <div>
          <%= f.input :country_code do %>
            <%= f.country_select :country_code, {priority: %w(NL), :include_blank => true}, {object: f.object, prompt: 'Please select a country'} %>
          <% end %>
        </div>
        <div>
          <%= f.input :state_province do %>
            <%= render partial: 'state', locals: {country_code: f.object.country_code} %>
          <% end %>
        </div>
        <div>
          <%= f.input :name %>
        </div>
        <div></div>

        <div>
          <%= f.input :latitude, :input_html => {:readonly => true} %>
          <%= f.input :longitude, :input_html => {:readonly => true} %>
          <%= f.input :top_left_lat, :as => :hidden %>
          <%= f.input :top_left_lon, :as => :hidden %>
          <%= f.input :bottom_right_lat, :as => :hidden %>
          <%= f.input :bottom_right_lon, :as => :hidden %>
          <%= f.input :radius, :hint => "Radius is shown in Kilometers" %>
        </div>
      </div>
      <div class="span4">
        <% options = {
            :map_options => {
                :auto_adjust => true,
                zoomControl: true,
                zoom: 10,
                streetViewControl: false,
                scaleControl: false,
                rotateControl: false,
                mapTypeControl: false,
                panControl: false,
                center_latitude: @city.latitude,
                center_longitude: @city.longitude,
                draggable: false
            },
            :circles => {:data => []},
            :markers => {:data => [], :options => {:do_clustering => true}}

        }
        %>
        <%= gmaps(options) %>
      </div>

  </div>

  <div class="form-actions">
    <%= f.button :submit %>
  </div>
<% end %>

<% content_for :scripts do %>
  <script>
    var buffer_circle = null;
    var map_marker = null;


    Gmaps.map.callback = function () {
      console.log("callback", arguments);
      var map = Gmaps.map.map,
          geocoder = new google.maps.Geocoder(),
          crosshairShape = {coords: [0, 0, 0, 0], type: 'rect'},
          marker, mapReady = false;


      <% if @city.new_record? %>
      setDefaultMapCenter(map);
      <% else %>
      createCircle(<%=@city.latitude %>, <%= @city.longitude %>, <%= @city.radius %>);
      setMarker(<%=@city.latitude %>, <%= @city.longitude %>);

      <% end %>


      google.maps.event.addListener(map, 'tilesloaded', function () {
//        console.log("tiles loaded")
      });

      google.maps.event.addListener(map, 'center_changed', function () {
//        console.log("center_changed");
      });
      google.maps.event.addListener(map, 'zoom_changed', function () {
//        console.log("zoom_changed");

      });

      google.maps.event.addListener(map, 'idle', function () {
//        console.log("idle");


        if (mapReady) {
          console.log("go")

        }
        mapReady = true;
      });
    };

    setDefaultMapCenter = function (map) {
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({address: "Amsterdam, Netherlands"}, function (results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          result = results[0];
          if (result) {
            map.setCenter(result.geometry.location);
            var rad = $("#city_radius").val();
            createCircle(result.geometry.location.hb, result.geometry.location.ib, rad);
            setMarker(result.geometry.location.hb, result.geometry.location.ib);
          }
        }
      });
    }

    window.setMapCenter = function(addressToGeocode)
    {
      map = Gmaps.map.map;
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({address: addressToGeocode}, function (results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          result = results[0];
          if (result) {
            map.setCenter(result.geometry.location);
            var rad = $("#city_radius").val();
            createCircle(result.geometry.location.hb, result.geometry.location.ib, rad);
            setMarker(result.geometry.location.hb, result.geometry.location.ib);
          }
        }
      });

    }

    window.setMarker = function(lat, lon, map)
    {
      if(map == null){
        map = Gmaps.map.map;
      }
      if(map_marker != null){
        map_marker.setMap(null);
      }

      map_marker = new google.maps.Marker(
          {
            map: map,
            position : new google.maps.LatLng(lat,lon)
          }
      );
    }

    // Draw circle with radius
    window.createCircle = function(lat,lon,rad, map) {
      rad *= 1000; // convert to meters if in miles
      if(map == null){
      map = Gmaps.map.map;
      }

      if (buffer_circle != null) {
        buffer_circle.setMap(null);
      }

      buffer_circle = new google.maps.Circle({
        center: new google.maps.LatLng(lat, lon),
        radius: rad,
        strokeColor: "",
        strokeOpacity: 0.0,
        strokeWeight: 2,
        fillColor: "#ADFF2F",
        fillOpacity: 0.5,
        map: map
      });

      getSquareForCity(lat,lon,rad);

    }

    window.getSquareForCity = function(lat,lon,rad)
    {
      var cityLatLng = new google.maps.LatLng(lat,lon);
      var spherical = google.maps.geometry.spherical;
      var north = spherical.computeOffset(cityLatLng, rad, 0);
      var west  = spherical.computeOffset(cityLatLng, rad, -90);
      var south = spherical.computeOffset(cityLatLng, rad, 180);
      var east  = spherical.computeOffset(cityLatLng, rad, 90);
      $("#city_top_left_lat").val(north.hb);
      $("#city_top_left_lon").val(west.ib);
      $("#city_bottom_right_lat").val(south.hb);
      $("#city_bottom_right_lon").val(east.ib);



      console.log(north);
      console.log(east);

    }
  </script>
<% end %>
